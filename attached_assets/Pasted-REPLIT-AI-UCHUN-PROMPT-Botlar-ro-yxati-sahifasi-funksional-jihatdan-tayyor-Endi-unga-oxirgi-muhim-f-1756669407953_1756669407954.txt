REPLIT AI UCHUN PROMPT
Botlar ro'yxati sahifasi funksional jihatdan tayyor. Endi unga oxirgi muhim funksiyani â€” yangi bot yaratish imkoniyatini qo'shamiz va umumiy dizaynni professional darajaga olib chiqamiz. Quyidagilarni bajar:

Kerakli shadcn/ui komponentlarini o'rnat:
npx shadcn-ui@latest add dialog form textarea

frontend/src/pages/Login.tsx sahifasining dizaynini shadcn/uining rasmiy namunalariga o'xshatib, yanada chiroyli qilish uchun uning kodini quyidagi bilan to'liq almashtir:

TypeScript

// frontend/src/pages/Login.tsx faylining yangi tarkibi
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export function LoginPage() {
  const [email, setEmail] = useState("test@example.com");
  const [password, setPassword] = useState("string");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      const params = new URLSearchParams();
      params.append('username', email);
      params.append('password', password);

      const response = await axios.post(`/api/auth/token`, params, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
      });

      if (response.data.access_token) {
        localStorage.setItem("access_token", response.data.access_token);
        navigate("/dashboard");
      }
    } catch (err) {
      setError("Login yoki parol xato.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col justify-center items-center">
      <Card className="mx-auto max-w-sm">
        <CardHeader>
          <CardTitle className="text-2xl">Login</CardTitle>
          <CardDescription>BotFactory hisobingizga kirish uchun ma'lumotlarni kiriting</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit}>
            <div className="grid gap-4">
              <div className="grid gap-2">
                <Label htmlFor="email">Email</Label>
                <Input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} required />
              </div>
              <div className="grid gap-2">
                <Label htmlFor="password">Parol</Label>
                <Input id="password" type="password" value={password} onChange={(e) => setPassword(e.target.value)} required />
              </div>
              {error && <p className="text-sm text-red-500">{error}</p>}
              <Button type="submit" className="w-full" disabled={loading}>
                {loading ? 'Kirilmoqda...' : 'Kirish'}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  );
}
Yangi bot yaratish formasini o'zida saqlaydigan alohida komponent yarat. frontend/src/components/ ichida CreateBotDialog.tsx nomli yangi fayl yarat va unga quyidagi kodni joylashtir:

TypeScript

// frontend/src/components/CreateBotDialog.tsx fayli
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import apiClient from "@/lib/api";

export function CreateBotDialog({ onBotCreated }: { onBotCreated: () => void }) {
  const [open, setOpen] = useState(false);
  const [token, setToken] = useState("");
  const [kbUz, setKbUz] = useState("");
  const [kbRu, setKbRu] = useState("");
  const [kbEn, setKbEn] = useState("");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    try {
      await apiClient.post("/bots/", {
        telegram_token: token,
        knowledge_base_uz: kbUz,
        knowledge_base_ru: kbRu,
        knowledge_base_en: kbEn,
      });
      setOpen(false); // Oynani yopish
      onBotCreated(); // Ro'yxatni yangilash uchun
    } catch (err) {
      setError("Bot yaratishda xatolik yuz berdi.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>Yangi bot qo'shish</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>Yangi Bot Yaratish</DialogTitle>
          <DialogDescription>Bot ma'lumotlarini kiriting. Bilimlar bazasini keyinroq ham to'ldirishingiz mumkin.</DialogDescription>
        </DialogHeader>
        <form onSubmit={handleSubmit}>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="token" className="text-right">Telegram Token</Label>
              <Input id="token" value={token} onChange={(e) => setToken(e.target.value)} className="col-span-3" required />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="kb_uz" className="text-right">Bilimlar bazasi (UZ)</Label>
              <Textarea id="kb_uz" value={kbUz} onChange={(e) => setKbUz(e.target.value)} className="col-span-3" rows={4} />
            </div>
             <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="kb_ru" className="text-right">Bilimlar bazasi (RU)</Label>
              <Textarea id="kb_ru" value={kbRu} onChange={(e) => setKbRu(e.target.value)} className="col-span-3" rows={4} />
            </div>
             <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="kb_en" className="text-right">Bilimlar bazasi (EN)</Label>
              <Textarea id="kb_en" value={kbEn} onChange={(e) => setKbEn(e.target.value)} className="col-span-3" rows={4} />
            </div>
            {error && <p className="col-span-4 text-sm text-red-500 text-center">{error}</p>}
          </div>
          <div className="flex justify-end">
            <Button type="submit" disabled={loading}>{loading ? "Saqlanmoqda..." : "Saqlash"}</Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
frontend/src/pages/Dashboard.tsx faylini yangilab, unga "Yangi bot qo'shish" tugmasini va modal oynani chaqirish mantig'ini qo'sh:

TypeScript

// frontend/src/pages/Dashboard.tsx faylining yangi tarkibi
import { useEffect, useState, useCallback } from "react";
import { DashboardLayout } from "@/components/layout/DashboardLayout";
import apiClient from "@/lib/api";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { CreateBotDialog } from "@/components/CreateBotDialog";

interface Bot {
  id: number;
  telegram_token: string;
  status: 'TRIAL' | 'ACTIVE' | 'INACTIVE';
  plan_type: 'TRIAL' | 'MONTHLY' | 'YEARLY';
  default_language: string;
}

export function DashboardPage() {
  const [bots, setBots] = useState<Bot[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  const fetchBots = useCallback(async () => {
    setLoading(true);
    try {
      const response = await apiClient.get('/bots/me');
      setBots(response.data);
    } catch (err) {
      setError("Botlarni yuklashda xatolik yuz berdi.");
    } finally {
      setLoading(false);
    }
  }, []);

  useEffect(() => {
    fetchBots();
  }, [fetchBots]);

  const maskToken = (token: string) => token.substring(0, 12) + '...';

  return (
    <DashboardLayout>
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold">Mening Botlarim</h2>
        <CreateBotDialog onBotCreated={fetchBots} />
      </div>

      {loading && <p>Yuklanmoqda...</p>}
      {error && <p className="text-red-500">{error}</p>}

      {!loading && !error && (
        <div className="border rounded-lg">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>ID</TableHead>
                <TableHead>Telegram Token</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Til</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {bots.length > 0 ? (
                bots.map((bot) => (
                  <TableRow key={bot.id}>
                    <TableCell className="font-medium">{bot.id}</TableCell>
                    <TableCell>{maskToken(bot.telegram_token)}</TableCell>
                    <TableCell>
                      <Badge variant={bot.status === 'ACTIVE' ? 'default' : 'secondary'}>{bot.status}</Badge>
                    </TableCell>
                    <TableCell>{bot.default_language.toUpperCase()}</TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={4} className="text-center">Hali botlaringiz yo'q. Birinchisini qo'shing!</TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      )}
    </DashboardLayout>
  );
}
Barcha amallar tugagach, "Yangi bot yaratish funksiyasi qo'shildi va dizayn yangilandi!" deb xabar ber.
Hisobot Talabi:

Ushbu promptni Replit AI'ga yuboring.

AI topshiriqni bajargandan so'ng, menga frontend/src/pages/Dashboard.tsx fayli va yangi frontend/src/components/CreateBotDialog.tsx faylining to'liq tarkibini yuboring.

Shu bosqichdan so'ng bizning Frontend ilovamiz nafaqat to'liq funksional, balki chiroyli va foydalanishga qulay bo'ladi. Bu bizning Frontend uchun rejalashtirgan so'nggi bosqichimiz!